@using System.Web.Optimization
@using Business_Logic.Enums
@using DEBS = Business_Logic.DictExpressionBuilderSystem
@using Business_Logic.Helpers



<div class="content inline-block" style="height: calc(100% - 30px); width: 100%; display: inline-block; margin: 20px 0 0 0; padding: 0;">
    <div style="margin: 0; padding: 0; height: 100%; width: calc(100% - 400px); float: left; border: solid silver thin; overflow: hidden;">
        <div style="margin: 0; padding: 0; height: 40px; width: 100%; float: right;">
            <div style="margin: 0; padding: 5px 0; width: 300px; float: right;"><input type="text" id="dateFrom" style="width:100px;" value="@DateHelper.DateToString(DateTime.Now.Date)"> :@DEBS.Translate("Schedule.DateFrom")</div>
            <div style="margin: 0; padding: 5px 0; width: 300px; float: right;"><input type="text" id="dateTo" style="width:100px;" value="@DateHelper.DateToString(DateTime.Now.AddDays(7).Date)"> :@DEBS.Translate("Schedule.DateTo")</div>
        </div>
        <div style="margin: 0; padding: 0; height: 50px; width: 100%; float: right;">
            <div style="margin: 0; padding: 0; height: 25px; width: 100%; float: right;">
                <div style="text-align:center; margin: 0; padding: 0; width: 80px; float: right;">@DEBS.Translate("Schedule.ArriveTime")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 80px; float: right;">@DEBS.Translate("Schedule.LeaveTime")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">&nbsp;</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Sun")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Mon")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Tue")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Wed")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Thu")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Fri")</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">@DEBS.Translate("Schedule.Sut")</div>
            </div>
            <div style="margin: 0; padding: 0; height: 25px; width: 100%; float: right;">
                <div style="text-align:center; margin: 0; padding: 0; width: 80px; float: right;"><input type="checkbox" value="true" name="ArriveTime" checked title="@DEBS.Translate("Schedule.ArriveTime")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 80px; float: right;"><input type="checkbox" value="true" name="LeaveTime" checked title="@DEBS.Translate("Schedule.LeaveTime")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;">&nbsp;</div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Sun" checked title="@DEBS.Translate("Schedule.Sun")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Mon" checked title="@DEBS.Translate("Schedule.Mon")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Tue" checked title="@DEBS.Translate("Schedule.Tue")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Wed" checked title="@DEBS.Translate("Schedule.Wed")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Thu" checked title="@DEBS.Translate("Schedule.Thu")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Fri" checked title="@DEBS.Translate("Schedule.Fri")"></div>
                <div style="text-align:center; margin: 0; padding: 0; width: 60px; float: right;"><input type="checkbox" value="true" name="Sut" checked title="@DEBS.Translate("Schedule.Sut")"></div>
            </div>
        </div>
        <div style="margin: 0; padding: 0; height: 30px; width: 100%; float: right;">
            <button id="btnShowCube" title="@DEBS.Translate("Schedule.ShowCube")"><span class="glyphicon glyphicon-zoom-in" aria-hidden="true"></span></button>
            <button id="btnUpdateLines" title="@DEBS.Translate("Schedule.UpdateLines")"><span class="glyphicon glyphicon-import" aria-hidden="true"></span></button>
            <button id="btnRefresh" title="@DEBS.Translate("Schedule.Refresh")"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
            <div style="display:inline-block">
                <!-- Switch -->
                <div id="SW_WeekAutoScheduleGenerator" class="Switch" turned="true" style="height:30px">
                    <div class="Toggle"></div>
                    <span class="On"><i class="glyphicon glyphicon-off"></i></span>
                    <span class="Off"><i class="glyphicon glyphicon-off"></i></span>
                </div>
                <span class="switch-caption">
                    @DEBS.Translate("General.TurnWeekAutoScheduleGenerator")
                </span>
            </div>
        </div>

        <div style="margin: 0; padding: 0; height: calc(100% - 110px); width: 100%; float: right; border: solid silver thin; overflow-x: hidden; overflow-y: auto;">
            <div class="content jqgrid-extended" id="dScheduleTable">
                <table id="grSchedule"></table>
                <div id="pgSchedule"></div>
            </div>
        </div>
    </div>
    <div style="margin: 0; padding: 0; height: 100%; width: 400px; float: left; border: solid silver thin; overflow: hidden;">
        <div style="margin: 0; padding: 0; height: 100%; width: 100%; float: right; border: solid silver thin; overflow-x: hidden; overflow-y: auto;">
            <div class="content jqgrid-extended" id="dLinesTable">
                <table id="grLines"></table>
            </div>
        </div>
    </div>
</div>

<div id="dlgUpdateLines" title="Update lines" hidden style="width: 900px; height: 500px;">
    <div class="content jqgrid-extended" id="dGeneratedScheduleTable" style="width: 100%; height: calc(100% - 50px); overflow-x: hidden; overflow-y: auto;">
        <table id="grGeneratedSchedule" style="width: calc(100% - 10px)"></table>
        <div id="pgGeneratedSchedule"></div>
    </div>
    <div style="width: 100%; height: 50px;">
        <hr style="margin:0; padding:5px;"/>
        <button id="btnUpdateLinesApplay" title="@DEBS.Translate("Schedule.Applay")"><span class="glyphicon glyphicon-ok-circle" aria-hidden="true"></span></button>
        <button id="btnUpdateLinesCancel" title="@DEBS.Translate("Schedule.Cancel")"><span class="glyphicon glyphicon-ban-circle" aria-hidden="true"></span></button>
    </div>
</div>

<div id="dlgShowCube" title="Show Cube" hidden style="width: 900px; height: 500px;">
@*    @Html.Partial("~/Views/Report/Index.cshtml")*@
</div>




@section scripts{
    @Scripts.Render("~/bundles/jqGridExtend")
    @Scripts.Render("~/bundles/JquerySimpleUI")
    @Scripts.Render("~/bundles/AppConfigControl")
    <script>
        $(function () {
            //AppConfig
            var AppCC = new AppConfigControl({
                update: '@Url.Action("Update", "AppConfig")',
                get: '@Url.Action("Get", "AppConfig")'
            })
            AppCC.GetSettings(
                ['PopulateLinesIsActive'],
                function (data) {
                    new $SimpleSwitch($('#SW_WeekAutoScheduleGenerator'),
                        data['PopulateLinesIsActive'],
                        function (state) {
                            AppCC.UpdateSettings({ 'PopulateLinesIsActive': state })
                        }
                    )
                }
            )

            //var pagerID = "#pgLines";
            var linesGrid = $("#grLines"),
                dateFrom = $('#dateFrom'),
                dateTo = $('#dateTo');

            var printWindow = null;

            var scheduleGrid = $("#grSchedule");
            var scheduleGridExtend = new jqGridExtend(scheduleGrid);
            var schedulePagerID = "#pgSchedule";

            var generatedScheduleGrid = $("#grGeneratedSchedule");
            var generatedScheduleGridExtend = new jqGridExtend(generatedScheduleGrid);

            dateFrom.datepicker({
                    regional: $.datepicker.regional["he"],
                    dateFormat: 'dd/mm/yy',
                    onSelect: function() {
                        scheduleGrid.jqGrid().trigger('reloadGrid');
                        this.focus();
                    },
                    onClose: function() { this.focus(); }
                })
                //.datepicker('setDate', new Date())
                .on("input change", function(e) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                });
            dateTo.datepicker({
                    regional: $.datepicker.regional["he"],
                    dateFormat: 'dd/mm/yy',
                    onSelect: function() {
                        scheduleGrid.jqGrid().trigger('reloadGrid');
                        this.focus();
                    },
                    onClose: function() { this.focus(); }
                })
                //.datepicker('setDate', 7)
                .on("input change", function(e) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                });

            linesGrid.jqGrid({
                caption: '@DEBS.Translate("Line.GridCaption")',
                url: '/api' + '@Url.Action("GetLines", "ScheduleApi")',
                datatype: "json",
                sortname: 'LineName',
                sortorder: "asc",
                altclass: "ui-state-default",
                height: "100%",
                viewrecords: true,
                loadonce: true,
                hidegrid: false,
                multiselect: true,
                rowNum: -1,
                colNames: [
                    '@DEBS.Translate("Line.Id")',
                    '@DEBS.Translate("Line.LineName")',
                    '@DEBS.Translate("Line.LineNumber")',
                    '@DEBS.Translate("Line.Direction")',
                    '@DEBS.Translate("Line.IsActive")',
                ],
                colModel: [
                    { name: "Id", index: 'Id', key: true, hidden: false, width: 50, sortable: false, editable: false, edittype: "text", search: false },
                    { name: 'LineName', index: 'LineName', sorttype: "text", width: 110 },
                    { name: 'LineNumber', index: 'LineNumber', sorttype: "text", width: 50 },
                    {
                        name: 'Direction',
                        index: 'Direction',
                        sorttype: "select",
                        width: 80,
                        editable: false,
                        search: false,
                        edittype: 'select',
                        formatter: 'select',
                        editoptions: {
                            value: {
                                '@((int) LineDirection.Bouth)': '@DEBS.Translate("General.Bouth")',
                                '@((int) LineDirection.To)': '@DEBS.Translate("General.To")',
                                '@((int) LineDirection.From)': '@DEBS.Translate("General.From")'
                            }
                        }
                    },
                    { name: 'IsActive', index: 'IsActive', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                ],
                onSelectRow: function(id) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                },
                onSelectAll: function(id) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                },
                loadComplete: function() {
                    scheduleGrid.jqGrid("setGridParam", { datatype: "json" });
                    $("#cb_" + this.id).click();
                }
            })


            // ---------------------- Schedule grid ----------------------------

            var lineActionsFormatter = function(cellvalue, options, rowObject) {
                var res = "";
                res += '<div style="margin-left: 8px;">';
                res += '    <div title="@DEBS.Translate("grid.EditSelectedRow")" style="float: left; cursor: pointer;" class="ui-pg-div ui-inline-edit" id="jEditButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'edit\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-pencil"></span></div>';
                res += '    <div title="@DEBS.Translate("grid.DeleteSelectedRow")" style="float: left;" class="ui-pg-div ui-inline-del" id="jDeleteButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'del\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-trash"></span></div>';
                res += '    <div title="@DEBS.Translate("grid.SaveRow")" style="float: left; display: none" class="ui-pg-div ui-inline-save" id="jSaveButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'save\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-floppy-disk"></span></div>';
                res += '    <div title="@DEBS.Translate("grid.CancelRowEditing")" style="float: left; display: none;" class="ui-pg-div ui-inline-cancel" id="jCancelButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'cancel\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-ban-circle"></span></div>';
                res += '</div>';
                return res;
            };

            var commonScheduleGridParams = {
                caption: "@DEBS.Translate("Schedule.GridCaption")",
                postData: getScheduleGridParams(),
                loadonce: false,
                scrollerbar: true,
                height: "100%",
                autowidth: true,
                regional: "il",
                hidegrid: false,
                //multiselect: false,
                mtype: "get",
                viewrecords: true,
                ignoreCase: true,
                loadui: "disable",
                altRows: false,
                sortable: true,
                altclass: "ui-state-default",
                sortname: 'Id',
                sortorder: "asc",
                colNames: [
                    '@DEBS.Translate("Schedule.Id")',
                    '@DEBS.Translate("Schedule.Date")',
                    '@DEBS.Translate("Schedule.Direction")',
                    '@DEBS.Translate("Schedule.LineIdDescription")',
                    '@DEBS.Translate("Schedule.LineIdKey")',
                    '@DEBS.Translate("Schedule.LineId")',
                    '@DEBS.Translate("Schedule.DriverIdDescription")',
                    '@DEBS.Translate("Schedule.DriverIdKey")',
                    '@DEBS.Translate("Schedule.DriverId")',
                    '@DEBS.Translate("Schedule.BusIdDescription")',
                    '@DEBS.Translate("Schedule.BusIdKey")',
                    '@DEBS.Translate("Schedule.BusId")',
                    '@DEBS.Translate("Schedule.leaveTime")',
                    '@DEBS.Translate("Schedule.arriveTime")',
                    ""
                ],
                colModel: [
                    { name: "Id", index: 'Id', key: true, hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    { name: 'Date', index: 'Date', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'd/m/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function(element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'dd/mm/yy', onSelect: function() { this.focus(); }, onClose: function() { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                    {
                        name: 'Direction',
                        index: 'Direction',
                        sorttype: "select",
                        width: 110,
                        editable: true,
                        search: false,
                        edittype: 'select',
                        formatter: 'select',
                        editoptions: {
                            value: {
                                '@((int) LineDirection.Bouth)': '@DEBS.Translate("General.Bouth")',
                                '@((int) LineDirection.To)': '@DEBS.Translate("General.To")',
                                '@((int) LineDirection.From)': '@DEBS.Translate("General.From")'
                            }
                        }
                    },
                    { name: 'LineIdDescription', index: 'LineIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    { name: 'LineIdKey', index: 'LineIdKey', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    {
                        name: 'LineId',
                        index: 'LineId',
                        sorttype: "text",
                        search: false,
                        editable: true,
                        edittype: "select",
                        editoptions: {
                            dataUrl: '/api' + '@Url.Action("GetScheduleLines", "ScheduleApi")',
                            dataInit: function(elem) {
                                var lineIdSelect = $(elem);
                                lineIdSelect.width('94%'); // set the width for dropdown
                                lineIdSelect.on('change', function(e) {
                                    var lineId = this.value;
                                    $.ajax({
                                        url: '/api' + '@Url.Action("GetAvailableBuses", "ScheduleApi")',
                                        data: { lineId: lineId },
                                        type: 'GET',
                                        dataType: 'json',
                                        contentType: 'application/json; charset=utf-8',
                                        success: function(data) {
                                            var busesOptions = buildBusesOptions(data);
                                            var container = lineIdSelect.parent().closest('tr.jqgrow, table');
                                            var busesSelect = container.find('select[name=BusId]');
                                            busesSelect.html(busesOptions);
                                            busesSelect.change();
                                            container.find('td[aria-describedby$=LineIdKey]').html(lineId);
                                        }
                                    });
                                });
                            },
                            buildSelect: function(data) {
                                var response = jQuery.parseJSON(data);
                                var s = '<select>';
                                if (response && response.Data.length) {
                                    for (var i = 0, l = response.Data.length; i < l; i++) {
                                        var ri = response.Data[i];
                                        s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                    }
                                }
                                return s + "</select>";
                            },
                        },
                    },
                    { name: 'DriverIdDescription', index: 'DriverIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    { name: 'DriverIdKey', index: 'DriverIdKey', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    {
                        name: 'DriverId',
                        index: 'DriverId',
                        sorttype: "text",
                        search: false,
                        editable: true,
                        edittype: "select",
                        editoptions: {
                            dataUrl: '/api' + '@Url.Action("GetScheduleDrivers", "ScheduleApi")',
                            dataInit: function(elem) {
                                $(elem).width('94%'); // set the width for dropdown
                                $(elem).on('change', function(e) {
                                    var driverId = this.value;
                                    $(elem).parent().closest('tr.jqgrow, table').find('td[aria-describedby$=DriverIdKey]').html(driverId);
                                });
                            },
                            postData: function(rowid, value, cmName) {
                                return {
                                    lineId: rowid
                                }
                            },
                            buildSelect: function(data) {
                                var response = jQuery.parseJSON(data);
                                var s = '<select>';
                                if (response && response.Data.length) {
                                    for (var i = 0, l = response.Data.length; i < l; i++) {
                                        var ri = response.Data[i];
                                        s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                    }
                                }
                                return s + "</select>";
                            },
                        },
                    },
                    { name: 'BusIdDescription', index: 'BusIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    { name: 'BusIdKey', index: 'BusIdKey', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    {
                        name: 'BusId',
                        index: 'BusId',
                        sorttype: "text",
                        search: false,
                        editable: true,
                        edittype: "select",
                        editoptions: {
                            dataUrl: '/api' + '@Url.Action("GetAvailableBuses", "ScheduleApi")',
                            dataInit: function(elem) {
                                $(elem).width('94%'); // set the width for dropdown
                                $(elem).on('change', function(e) {
                                    var busId = this.value;
                                    $(elem).parent().closest('tr.jqgrow, table').find('td[aria-describedby$=BusIdKey]').html(busId);
                                });
                            },
                            postData: function(rowid, value, cmName) {
                                return {
                                    scheduleId: rowid
                                }
                            },
                            buildSelect: function(data) {
                                var response = jQuery.parseJSON(data);
                                return '<select>' + buildBusesOptions(response) + '</select>';
                            },
                        },
                    },
                    { name: 'leaveTime', index: 'leaveTime', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'hh:mm', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function(element) { $(element).timepicker({ onSelect: function() { this.focus(); }, onClose: function() { this.focus(); } }); } }, editrules: { custom: true, custom_func: timecheck }, search: false },
                    { name: 'arriveTime', index: 'arriveTime', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'hh:mm', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function(element) { $(element).timepicker({ onSelect: function() { this.focus(); }, onClose: function() { this.focus(); } }); } }, editrules: { custom: true, custom_func: timecheck }, search: false },
                    {
                        name: 'ActionsBtn',
                        index: 'ActionsBtn',
                        width: 80,
                        align: 'center',
                        search: false,
                        formatter: lineActionsFormatter,
                    },
                ],
                saveAfterSelect: true
            }

            scheduleGrid.jqGrid($.extend({}, commonScheduleGridParams, {
                    url: '/api' + '@Url.Action("GetSchedule", "ScheduleApi")',
                    datatype: "local",
                    pager: schedulePagerID,
                    rowNum: 20,
                    rowList: [10,  20, 30, 40, 50],
                    beforeSelectRow: function(rowid) {
                        scheduleGridExtend.restore(rowid);
                        return false;
                    },
                    ondblClickRow: function(rowid, iRow, iCol) {
                        scheduleGridExtend.editRow(rowid);
                    },
                    loadComplete: function(data) {
                        scheduleGridExtend.populateDescription(data);
                    },
                    editurl: '/api' + '@Url.Action("EditItem", "ScheduleApi")',
                    reloadAfterSubmit: true,
                }))
                .navGrid(schedulePagerID, {
                        edit: false,
                        add: true,
                        addtitle: "@DEBS.Translate("grid.CreateNewRow")",
                        del: false,
                        deltitle: "@DEBS.Translate("grid.DeleteRow")",
                        refresh: true,
                        refreshtitle: "@DEBS.Translate("grid.Reload")",
                        search: false,
                        view: false,
                        closeAfterAdd: true,
                        closeAfterEdit: true,
                        reloadAfterSubmit: true,
                    }
                )
                @*.navButtonAdd(schedulePagerID, {
                    id: "toExcel",
                    buttonicon: "ui-icon-disk",
                    caption: "",
                    title: "@DEBS.Translate("grid.ToExcel")",
                    onClickButton: function () {
                        var postData = grid.jqGrid('getGridParam', 'postData');
                        var urlGetExcel = '/api' + "@Url.Action("GetExcel", "ScheduleApi")";
                        var url = urlGetExcel + "?" + $.param(postData);
                        window.location.href = url;
                    }
                })*@
                .filterToolbar({
                        stringResult: true,
                        enableClear: false
                    }
                );

            scheduleGridExtend.init();


            // ---------------------------- Generated Schedule grid -------------------------

            generatedScheduleGrid.jqGrid($.extend({}, commonScheduleGridParams, {
                    rowNum: -1,
                    url: '/api' + '@Url.Action("GenerateSchedule", "ScheduleApi")',
                    datatype: "local",
                    beforeSelectRow: function(rowid) {
                        generatedScheduleGridExtend.restore(rowid);
                        return false;
                    },
                    ondblClickRow: function(rowid, iRow, iCol) {
                        generatedScheduleGridExtend.editRow(rowid);
                    },
                    loadComplete: function(data) {
                        generatedScheduleGridExtend.populateDescription(data);
                    },
                    editurl: 'clientArray',
                    reloadAfterSubmit: false
                }))
                .filterToolbar({
                    stringResult: true,
                    enableClear: false
                });

            generatedScheduleGridExtend.init();

            function buildBusesOptions(data) {
                var s = '';
                if (data && data.Data.length) {
                    for (var i = 0, l = data.Data.length; i < l; i++) {
                        var ri = data.Data[i];
                        s += '<option value="' + ri.Value + '" title="' + ri.Title + '"' + (ri.Selected ? 'selected="selected"' : '') + '>' + ri.Text + '</option>';
                    }
                }
                return s;
            }

            function datecheck(value, colname) {
                if (value) {
                    var pattern = "(0[1-9]|[12][0-9]|3[01])(/)(0[1-9]|1[012])(/)(19|20)\\d\\d";
                    var regCheck = new RegExp(pattern);
                    if (!regCheck.test(value)) {
                        return [false, "@DEBS.Translate("grid.NotValidDate")" + " " + colname + ":" + value];
                    }
                }
                return [true, ""];
            }

            function timecheck(value, colname) {
                if (value) {
                    var pattern = "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$";
                    var regCheck = new RegExp(pattern);
                    if (!regCheck.test(value)) {
                        return [false, "@DEBS.Translate("grid.NotValidDate")" + " " + colname + ":" + value];
                    }
                }
                return [true, ""];
            }

            function getScheduleGridParams() {
                return {
                    LinesIds: function() { return linesGrid.jqGrid('getGridParam', 'selarrrow').join(); },
                    DateFrom: function() { return dateFrom.val() },
                    DateTo: function() { return dateTo.val() },
                    ArriveTime: function () { return $('[name=ArriveTime]').prop('checked') },
                    LeaveTime: function () { return $('[name=LeaveTime]').prop('checked') },
                    Sun: function () { return $('[name=Sun]').prop('checked') },
                    Mon: function () { return $('[name=Mon]').prop('checked') },
                    Tue: function () { return $('[name=Tue]').prop('checked') },
                    Wed: function () { return $('[name=Wed]').prop('checked') },
                    Thu: function () { return $('[name=Thu]').prop('checked') },
                    Fri: function () { return $('[name=Fri]').prop('checked') },
                    Sut: function () { return $('[name=Sut]').prop('checked') }
                }
            }

            // ---------------------------- Popup windows -------------------------
            $("#dlgUpdateLines").dialog({
                autoOpen: false,
                width: 900,
                height: 500,
                modal: true
            });

            $("#dlgShowCube").dialog({
                autoOpen: false,
                width: 900, //$(window).width(),
                height: 500, //$(window).height(),
                modal: true
            });

            $("#dlgEnterPass").dialog({
                autoOpen: false,
                width: 500, //$(window).width(),
                height: 500, //$(window).height(),
                modal: true
            });


            // ---------------------------- Control buttons -------------------------
            $("#btnRefresh").on("click", function() {
                scheduleGrid.trigger("reloadGrid");
            });

            $("#dlgUpdateLines").on('dialogclose', function(event) {
                generatedScheduleGrid.jqGrid('clearGridData');
            });
            $("#btnUpdateLinesApplay").on("click", function(event) {
                var localGridData = generatedScheduleGrid.jqGrid('getRowData'),
                    dataToSend = JSON.stringify(localGridData);
                $.ajax({
                    type: "POST",
                    url: '/api' + '@Url.Action("SaveGeneratedShcedule", "ScheduleApi")' + '?dateFrom=' + dateFrom.val() + '&dateTo=' + dateTo.val(),
                    dataType: "json",
                    data: dataToSend,
                    contentType: "application/json; charset=utf-8",
                    success: function(response, textStatus, jqXHR) {
                        // display an success message if needed
                        $("#dlgUpdateLines").dialog("close");
                        scheduleGrid.trigger("reloadGrid");
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // display an error message in any way
                        alert("error");
                    }
                });
            });
            $("#btnUpdateLinesCancel").on("click", function(event) {
                event.preventDefault();
                $("#dlgUpdateLines").dialog("close");
            });
            $("#btnUpdateLines").on("click", function() {
                generatedScheduleGrid.jqGrid("setGridParam", { datatype: "json" }).trigger("reloadGrid");
                generatedScheduleGrid.jqGrid("setGridParam", { datatype: "local" });
                $("#dlgUpdateLines").dialog("open");
                //generatedScheduleGrid.find(".ui-jqgrid .ui-jqgrid-bdiv").css({ "overflow-y": "scroll" });
            });

            $("#btnShowCube").on("click", function () {
                window.open("@Url.Action("Index", "Report")", "_self")
                return;

                dlgShowCube = $("#dlgShowCube");
                //dlgShowCube.dialog("option", "width", $(window).width());
                //dlgShowCube.dialog("option", "height", $(window).height());
                dlgShowCube.find("#reportGrid").trigger('reloadGrid');
                dlgShowCube.find("#summaryReportGrid").trigger('reloadGrid');
                dlgShowCube.dialog("open");
            });
        });
    </script>
}
@section styles{
    @Styles.Render("~/bundles/JquerySimpleUIcss")
}


