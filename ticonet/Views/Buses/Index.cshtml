@using System.Web.Optimization
@using DEBS = Business_Logic.DictExpressionBuilderSystem

<div class="content jqgrid-extended" id="dBusesTable">
    <table id="grBuses"></table>
    <div id="pgBuses"></div>
</div>

<!--Div for render grid for Print-->
<div hidden id="printBusesGrid"><table id="grPrintBuses"></table></div>

@section scripts{
    @Scripts.Render("~/bundles/jqGridExtend")
    <script>

        $(function () {
            var lineActionsFormatter = function (cellvalue, options, rowObject) {
                var res = "";
                    res += '<div style="margin-left: 8px;">';
                    res += '    <div title="@DEBS.Translate("grid.EditSelectedRow")" style="float: left; cursor: pointer;" class="ui-pg-div ui-inline-edit" id="jEditButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'edit\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-pencil"></span></div>';
                    res += '    <div title="@DEBS.Translate("grid.DeleteSelectedRow")" style="float: left;" class="ui-pg-div ui-inline-del" id="jDeleteButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'del\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-trash"></span></div>';
                    res += '    <div title="@DEBS.Translate("grid.SaveRow")" style="float: left; display: none" class="ui-pg-div ui-inline-save" id="jSaveButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'save\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-floppy-disk"></span></div>';
                    res += '    <div title="@DEBS.Translate("grid.CancelRowEditing")" style="float: left; display: none;" class="ui-pg-div ui-inline-cancel" id="jCancelButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'cancel\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-ban-circle"></span></div>';
                    res += '</div>';
                return res;
            };

            var printWindow = null;
            var grid = $("#grBuses");
            var gridExtend = new jqGridExtend(grid);
            var pagerID = "#pgBuses";

            grid.jqGrid({
                    caption: "@DEBS.Translate("Bus.GridCaption")",
                    url: '/api' + '@Url.Action("GetBuses", "BusesApi")',
                    datatype: "json",
                    loadonce: false,
                    height: "100%",
                    autowidth: true,
                    regional: "il",
                    hidegrid: false,
                    multiselect: false,
                    pager: pagerID,
                    mtype: "get",
                    rowNum: 20,
                    rowList: [10,  20, 30, 40, 50],
                    viewrecords: true,
                    ignoreCase: true,
                    loadui: "disable",
                    altRows: false,
                    sortable: true,
                    altclass: "ui-state-default",
                    editurl: '/api' + '@Url.Action("EditBus", "BusesApi")',
                    sortname: 'BusId',
                    sortorder: "asc",
                    colNames: [
                        '@DEBS.Translate("Bus.Id")',
                        '@DEBS.Translate("Bus.BusId")',
                        '@DEBS.Translate("Bus.PlateNumber")',
                        '@DEBS.Translate("BusCompany.Name")',
                        '@DEBS.Translate("BusCompany.Id")',
                        '@DEBS.Translate("Bus.seats")',
                        '@DEBS.Translate("Bus.price")',
                        '@DEBS.Translate("Bus.munifacturedate")',
                        '@DEBS.Translate("Bus.LicensingDueDate")',
                        '@DEBS.Translate("Bus.insuranceDueDate")',
                        '@DEBS.Translate("Bus.winterLicenseDueDate")',
                        '@DEBS.Translate("Bus.brakeTesDueDate")',
                        ""
                    ],
                    colModel: [
                        { name: "Id", index: 'Id', key: true, sortable: true, editable: false, edittype: "text", width: 60 },
                        { name: 'BusId', index: 'BusId', sorttype: "text", width: 90, editable: true },
                        { name: 'PlateNumber', index: 'PlateNumber', sorttype: "text", width: 110, editable: true },
                        { name: 'OwnerDescription', index: 'OwnerDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'Owner',
                            index: 'Owner',
                            sorttype: "text",
                            search: false,
                            editable: true,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetBusCompanies", "BusesApi")',
                                buildSelect: function (data) {
                                    var response = jQuery.parseJSON(data);
                                    var s = '<select>';
                                    if (response && response.Data.length) {
                                        for (var i = 0, l = response.Data.length; i < l; i++) {
                                            var ri = response.Data[i];
                                            s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                        }
                                    }
                                    return s + "</select>";
                                },
                            },
                        },
                        { name: 'seats', index: 'seats', sorttype: "text", width: 60, editable: true, search: false, formatter: 'integer', sorttype: "int" },
                        { name: 'price', index: 'price', sorttype: "text", width: 80, editable: true, search: false, formatter: 'number', sorttype: "float" },
                        { name: 'munifacturedate', index: 'munifacturedate', width: 80, align: 'left', sortable: true, formatter: 'text', editable: true, edittype: 'text', formatoptions: { defaultValue: "" }, editoptions: { defaultValue: "", size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ dateFormat: 'dd/mm/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        { name: 'LicensingDueDate', index: 'LicensingDueDate', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'd/m/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'dd/mm/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        { name: 'insuranceDueDate', index: 'insuranceDueDate', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'd/m/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'dd/mm/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        { name: 'winterLicenseDueDate', index: 'winterLicenseDueDate', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'd/m/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'dd/mm/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        { name: 'brakeTesDueDate', index: 'brakeTesDueDate', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'd/m/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'dd/mm/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        {
                            name: 'ActionsBtn',
                            index: 'ActionsBtn',
                            width: 80,
                            align: 'center',
                            search: false,
                            formatter: lineActionsFormatter,
                        },
                    ],
                    saveAfterSelect: true,
                    beforeSelectRow: function(rowid) {
                        gridExtend.restore(rowid);
                        return false;
                    },
                    ondblClickRow: function (rowid, iRow, iCol) {
                        gridExtend.editRow(rowid);
                    },
                    loadComplete: function (data) {
                        gridExtend.populateDescription(data);
                    }
                })
                .navGrid(pagerID, {
                        edit: false,
                        add: true,
                        addtitle: "@DEBS.Translate("grid.CreateNewRow")",
                        del: false,
                        deltitle: "@DEBS.Translate("grid.DeleteRow")",
                        refresh: true,
                        refreshtitle: "@DEBS.Translate("grid.Reload")",
                        search: false,
                        view: false,
                        closeAfterAdd: true,
                        closeAfterEdit: true,
                        reloadAfterSubmit: true,
                    }
                )
                .navButtonAdd(pagerID, {
                        id: "print",
                        buttonicon: "ui-icon-print",
                        caption: "",
                        title: "@DEBS.Translate("grid.Print")",
                        onClickButton: function () {
                            var postData = grid.jqGrid('getGridParam', 'postData');
                            var urlGetExcel = '/api' + "@Url.Action("GetPrint", "BusesApi")";
                            var url = urlGetExcel + "?" + $.param(postData);
                            if (printWindow == null || printWindow.closed) {
                                printWindow = window.open('', '', 'height=' + $(window).height() + ',width=' + $(window).width());
                            } else {
                                printWindow.focus();
                            }
                            $.ajax({
                                url: url,
                                type: 'GET',
                                dataType: 'json',
                                contentType: 'application/json; charset=utf-8',
                                success: function (data) {
                                    if (printWindow != undefined) {
                                        $("#grPrintBuses").jqGrid({
                                            datatype: "local",
                                            data: data,
                                            height: "auto",
                                            autowidth: true,
                                            rowNum: -1,
                                            colNames: [
                                                '@DEBS.Translate("Bus.BusId")',
                                                '@DEBS.Translate("Bus.PlateNumber")',
                                                '@DEBS.Translate("BusCompany.Name")',
                                                '@DEBS.Translate("Bus.seats")',
                                                '@DEBS.Translate("Bus.price")',
                                                '@DEBS.Translate("Bus.munifacturedate")',
                                                '@DEBS.Translate("Bus.LicensingDueDate")',
                                                '@DEBS.Translate("Bus.insuranceDueDate")',
                                                '@DEBS.Translate("Bus.winterLicenseDueDate")',
                                                '@DEBS.Translate("Bus.brakeTesDueDate")',
                                            ],
                                            colModel: [
                                                { name: "BusId" },
                                                { name: "PlateNumber" },
                                                { name: "OwnerDescription" },
                                                { name: "seats" },
                                                { name: "price" },
                                                { name: "munifacturedate" },
                                                { name: "LicensingDueDate" },
                                                { name: "insuranceDueDate" },
                                                { name: "winterLicenseDueDate" },
                                                { name: "brakeTesDueDate" },
                                            ],
                                            @*caption: "@DEBS.Translate("Bus.GridCaption")"*@
                                        });
                                        printWindow.document.clear();
                                        printWindow.document.write('<html><head><title>@DEBS.Translate("Bus.GridCaption")</title>');
                                        //printWindow.document.write('<style type=\"text/css\"> table th, table td { border:1px solid #000; padding:0; margin:0; } </style>');
                                        printWindow.document.write('</head><body >');
                                        printWindow.document.write('<div class="page">');
                                        printWindow.document.write('<div class="subpage">');
                                        printWindow.document.write($("#printBusesGrid").html());
                                        printWindow.document.write('</div>');
                                        printWindow.document.write('</div>');
                                        printWindow.document.write('</body></html>');
                                        printWindow.document.close();
                                        printWindow.print();
                                    }
                                }
                            });

                        }
                    }
                )
                .navButtonAdd(pagerID, {
                        id: "toExcel",
                        buttonicon: "ui-icon-disk",
                        caption: "",
                        title: "@DEBS.Translate("grid.ToExcel")",
                        onClickButton: function () {
                            var postData = grid.jqGrid('getGridParam', 'postData');
                            var urlGetExcel = '/api' + "@Url.Action("GetExcel", "BusesApi")";
                            var url = urlGetExcel + "?" + $.param(postData);
                            window.location.href = url;
                        }
                    }
                )
                .filterToolbar({
                        stringResult: true,
                        enableClear: false
                    }
                );

            gridExtend.init();

            function datecheck(value, colname) {
                if (value) {
                    var pattern = "(0[1-9]|[12][0-9]|3[01])(/)(0[1-9]|1[012])(/)(19|20)\\d\\d";
                    var regCheck = new RegExp(pattern);
                    if (!regCheck.test(value)) {
                        return [false, "@DEBS.Translate("grid.NotValidDate")" + " " + colname + ":" + value];
                    }
                }
                return [true, ""];
            }

        });
    </script>
}
